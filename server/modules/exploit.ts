
import { Target } from '../../types/index.ts';
import { logger } from '../utils/logger.ts';
import { ErrorLog } from '../../types/index.ts';

export const attemptExploit = async (target: Target, key: string, successRate: number): Promise<boolean> => {
    const effectiveSuccessRate = Math.max(0, Math.min(1, successRate));

    logger.info(`Module [Exploit]: Attempting breach on ${target.ip} on ports [${target.ports.join(', ')}] with a ${Math.round(effectiveSuccessRate * 100)}% success chance...`);
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const success = Math.random() < effectiveSuccessRate;
    
    if (success) {
        logger.info(`Module [Exploit]: SUCCESS - Gained access to ${target.ip}.`);
    } else {
        logger.warn(`Module [Exploit]: FAILED - Could not breach ${target.ip}.`);
    }

    return success;
};

export const getLastError = (): Omit<ErrorLog, 'targetIp'> => {
    return { type: 'conn_fail', details: 'Port refused or firewall block.' };
};